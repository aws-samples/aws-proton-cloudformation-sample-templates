AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy a Backend ECS service on EC2, hosted in a public or private subnet, 
             and accessible via Service Discovery SRV Record.
Mappings:
  TaskSize:
    x-small:
      cpu: 256
      memory: 512
    small:
      cpu: 512
      memory: 1024
    medium:
      cpu: 1024
      memory: 2048
    large:
      cpu: 2048
      memory: 4096
    x-large:
      cpu: 4096
      memory: 8192

Resources:
  ServiceTaskDefTaskRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyName: 'Publish2SNS'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'sns:Publish'
                Resource: '{{environment.outputs.SNSTopicArn}}'
  ServiceTaskDef:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      ContainerDefinitions:
        - Cpu: !FindInMap [TaskSize, {{service_instance.inputs.task_size}}, cpu]
          Essential: true
          Image: '{{service_instance.inputs.image}}'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ServiceTaskDefLogGroup
              awslogs-stream-prefix: '{{service.name}}/{{service_instance.name}}'
              awslogs-region: !Ref 'AWS::Region'
          Memory: !FindInMap [TaskSize, {{service_instance.inputs.task_size}}, memory]
          Name: '{{service_instance.name}}'
          PortMappings:
            - ContainerPort: '{{service_instance.inputs.port}}'
              HostPort: 0
              Protocol: tcp
          Environment:
            - Name: SNS_TOPIC_ARN
              Value: '{"ping":"{{environment.outputs.SNSTopicArn}}"}'
            - Name: SNS_REGION
              Value: "{{environment.outputs.SNSRegion}}"
      ExecutionRoleArn: '{{environment.outputs.ServiceTaskDefExecutionRoleArn}}'
      Family: '{{service.name}}_{{service_instance.name}}'
      NetworkMode: bridge
      RequiresCompatibilities:
        - EC2
      TaskRoleArn: !GetAtt 
        - ServiceTaskDefTaskRole
        - Arn
  ServiceTaskDefLogGroup:
    Type: 'AWS::Logs::LogGroup'
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  Service:
    Type: 'AWS::ECS::Service'
    Properties:
      ServiceName: '{{service.name}}_{{service_instance.name}}'
      Cluster: '{{environment.outputs.Cluster}}'
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: '{{service_instance.inputs.desired_count}}'
      EnableECSManagedTags: false
      LaunchType: EC2
      SchedulingStrategy: REPLICA
      ServiceRegistries:
        - RegistryArn: !GetAtt 
            - CloudmapService
            - Arn
          ContainerName: '{{service_instance.name}}'
          ContainerPort: '{{service_instance.inputs.port}}'
      TaskDefinition: !Ref ServiceTaskDef
  CloudmapService:
    Type: 'AWS::ServiceDiscovery::Service'
    Properties:
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: SRV
        NamespaceId: '{{environment.outputs.CloudMapNamespaceId}}'
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: '{{service_instance.name}}.{{service.name}}'
      NamespaceId: '{{environment.outputs.CloudMapNamespaceId}}'
  ECSHostSecurityGroupfromOtherHostContainers:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: -1
      Description: Ingress from other containers in the same security group
      GroupId: {{environment.outputs.ECSHostSecurityGroup}}
      SourceSecurityGroupId: {{environment.outputs.ECSHostSecurityGroup}}
  TaskCountTarget:
    Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
    DependsOn: Service
    Properties:
      MaxCapacity: 10
      MinCapacity: 1
      ResourceId: !Join 
        - ''
        - - service/
          - '{{environment.outputs.Cluster}}'
          - /
          - '{{service.name}}_{{service_instance.name}}'
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: ecs
  TaskCountTargetCpuScaling:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    Properties:
      PolicyName: BackendECSEC2ServiceTaskCountTargetCpuScaling
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref TaskCountTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 50
  TaskCountTargetMemoryScaling:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    Properties:
      PolicyName: BackendECSEC2ServiceTaskCountTargetMemoryScaling
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref TaskCountTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageMemoryUtilization
        TargetValue: 50
Outputs:
  BackendURL:
    Description: Type SRV DNS record for Service Discovery
    Value: "{{service_instance.name}}.{{service.name}}.{{environment.name}}.local"